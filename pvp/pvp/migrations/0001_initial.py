# Generated by Django 4.2.2 on 2023-07-01 06:31

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ChargedMove",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField()),
                ("abbreviation", models.CharField(null=True)),
                ("type", models.CharField()),
                ("power", models.IntegerField()),
                ("cooldown", models.IntegerField()),
                ("archetype", models.CharField(null=True)),
                ("move_id", models.CharField()),
                ("energy", models.IntegerField()),
                ("buffs", models.JSONField(blank=True, null=True)),
                (
                    "buff_target",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("self", "Self"),
                            ("opponent", "Opponent"),
                            ("both", "Both"),
                        ],
                        null=True,
                    ),
                ),
                ("buff_self", models.JSONField(blank=True, null=True)),
                ("buff_opponent", models.JSONField(blank=True, null=True)),
                ("buff_apply_chance", models.FloatField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="FastMove",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField()),
                ("move_id", models.CharField()),
                ("abbreviation", models.CharField(null=True)),
                ("type", models.CharField()),
                ("power", models.IntegerField()),
                ("cooldown", models.IntegerField()),
                ("archetype", models.CharField(null=True)),
                ("energy_gain", models.IntegerField()),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Format",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=64)),
                ("cup", models.CharField(max_length=32)),
                ("cp", models.PositiveSmallIntegerField()),
                ("meta", models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name="Matchup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("rating", models.PositiveSmallIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name="Pokemon",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("dex", models.IntegerField()),
                ("species_name", models.CharField()),
                ("species_id", models.CharField()),
                (
                    "elite_moves",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(), blank=True, null=True, size=None
                    ),
                ),
                ("level_25CP", models.PositiveIntegerField(blank=True, null=True)),
                ("base_stats", models.JSONField()),
                (
                    "types",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(blank=True, default="none"), size=2
                    ),
                ),
                ("default_ivs", models.JSONField(blank=True, null=True)),
                ("buddy_distance", models.SmallIntegerField(blank=True, null=True)),
                ("third_move_cost", models.PositiveIntegerField(blank=True, default=0)),
                ("released", models.BooleanField(blank=True, null=True)),
                ("family", models.JSONField(blank=True, null=True)),
                ("charged_moves", models.ManyToManyField(to="pvp.chargedmove")),
                ("fast_moves", models.ManyToManyField(to="pvp.fastmove")),
            ],
        ),
        migrations.CreateModel(
            name="Tag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("tag", models.CharField()),
            ],
        ),
        migrations.CreateModel(
            name="Ranking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("position", models.PositiveSmallIntegerField()),
                ("score", models.FloatField()),
                ("moves", models.JSONField(blank=True, null=True)),
                (
                    "moveset",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.CharField(), blank=True, size=None
                    ),
                ),
                (
                    "scores",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(), size=None
                    ),
                ),
                ("stats", models.JSONField(blank=True, null=True)),
                (
                    "format",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="pvp.format"
                    ),
                ),
                (
                    "matchups",
                    models.ManyToManyField(
                        blank=True,
                        related_name="opponent",
                        through="pvp.Matchup",
                        to="pvp.pokemon",
                    ),
                ),
                (
                    "pokemon",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="pvp.pokemon"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="pokemon",
            name="tags",
            field=models.ManyToManyField(blank=True, to="pvp.tag"),
        ),
        migrations.AddField(
            model_name="matchup",
            name="opponent",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="pvp.pokemon"
            ),
        ),
        migrations.AddField(
            model_name="matchup",
            name="pokemon",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="pvp.ranking"
            ),
        ),
    ]
